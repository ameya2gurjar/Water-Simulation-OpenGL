{
  "name": "water-gl",
  "tagline": "Computer Graphics Final Project - Water Simulation",
  "body": "## Setup Instructions\r\n* Add the JARs under lib/jars to your project's libraries.\r\n* Add `-Djava.library.path=lib/natives/` to your JVM options while building.\r\n* IMPORTANT - The native link libraries included are for Linux distributions.\r\nFor other platforms, you'll need to download them separately from [here](https://sourceforge.net/projects/java-game-lib/files/Official%20Releases/LWJGL%202.9.3/).\r\n\r\n## Showcase\r\n\r\n### Forest Terrain\r\n![Forest Terrain](https://github.umn.edu/chatt086/water-gl/blob/master/res/forest.png)\r\n\r\n### Stanford Zoo\r\n![Stanford Zoo](https://github.umn.edu/chatt086/water-gl/blob/master/res/stanford.png)\r\n\r\n## Objective\r\nThe aim of the project is to render a simulation of a scene consisting of a terrain and a water body using the modern OpenGL pipeline.\r\n\r\n## Group Members\r\n* Debojeet Chatterjee\r\n* Ameya Gurjar\r\n\r\n## Project Goals\r\n\r\nThe goal will be to render a scene containing a terrain and a water body which is described below separately.\r\n\r\n### Terrain Modelling\r\n\r\n* The terrain consists of a surface which has some foliage like trees, grass, flowers and ferns.\r\n\r\n* It is modelled as a triangulated quad.\r\n\r\n* Multiple texturing is used to texture the terrain which consists of a path, mud, flower patches and grass.\r\n\r\n* The entities are loaded as OBJ files.\r\n  \r\n### Water Modelling\r\n\r\n* The water body will basically be a simple quad made up of two triangles.\r\n\r\n* The quad will be textured so that it looks like a water body. A combination of reflection texture and refraction texture will be used. This will make use of frame buffer objects.\r\n\r\n* The two textures will be combined using the fresnel effect. This can be achieved by the formula\r\n`max(dot(water_normal, view_direction), 0)`\r\n\r\n* A higher value will result in less reflectiveness and a lower value will result in less refraction.  \r\n\r\n* The lighting position and the color of the light will be determined. A normal map will be used for the lighting calculations on the surface of the water.\r\n\r\n## Progress Description\r\n\r\n* We're using the Light-Weight Java Game Library for this project to try out a different style of OpenGL programming and also,\r\nsince using Java allows us to package and structure our code more easily in an Object Oriented manner.\r\n\r\n* So far we have managed to create a terrain that supports transparent textures to render ferns, flowers and grass clumps\r\nto let us see through areas where the alpha of the texture is less than 0.5\r\n\r\n* We're also mixing between the sky colour and the terrain as well as model texture color to haze distant models and terrains exponentially\r\nusing the equation `visibility = e^(-(distance*fogDensity)^fogGradient)`, \r\nwhere Fog Density controls how thick the fog is while Gradient controls how smoothly the scene hazes into the distance.\r\n\r\n* In addition, we are multi-texturing the terrain using a blend map to blend between 4 different textures based on the R, G, B components.\r\n\r\n* We're also able to randomly generate and place a large amount of foliage on the map for which we're using an optimised approach to load\r\na multitude of instanced entities by loading their corresponding textures only once before rendering them.\r\n\r\n* We have provided keyboard functions to navigate the world using W, A, S, D, LShift, LCtrl. Also, holding Space boosts the speed of \r\ncamera movement by a factor of 3.\r\n\r\n## CHALLENGES AND FUTURE WORK\r\n\r\n* Randomly generated foliage shows up on paths which seems unrealistic. \r\nWe could solve this by reading in the Blend Map and checking if the position\r\nof the foliage lies on the path and if so, discarding it.\r\n\r\n* We'd also like to have contours such as hills and valleys on the terrain for \r\nwhich we'll need to use a Height Map.\r\n\r\n* For water modelling, we'll need to make the refraction texture only render the\r\nscene below the water surface and the reflection texture only render the scene above the water surface.\r\n \r\n* We'll need to add a distortion effect to the water surface to make it look more realistic than still water.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}